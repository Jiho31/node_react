{"version":3,"sources":["UserList.js","CreateUser.js","App.js","serviceWorker.js","index.js"],"names":["User","user","onRemove","onToggle","style","cursor","color","active","onClick","id","username","email","UserList","users","map","key","CreateUser","onChange","onCreate","name","placeholder","value","App","useState","inputs","setInputs","setUsers","nextId","useRef","e","target","current","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAEA,SAASA,EAAT,GAA6C,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC5B,OACI,6BACI,uBAAGC,MAAO,CACNC,OAAQ,UACRC,MAAOL,EAAKM,OAAS,QAAU,SAEnCC,QAAS,kBAAML,EAASF,EAAKQ,MAExBR,EAAKS,UAEV,kCAAQT,EAAKU,MAAb,KACA,4BAAQH,QAAS,kBAAMN,EAASD,EAAKQ,MAArC,iBAoBGG,MAff,YAAkD,IAA9BC,EAA6B,EAA7BA,MAAOX,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SACjC,OACI,6BACKU,EAAMC,KAAI,SAAAb,GAAI,OACX,kBAACD,EAAD,CACCC,KAAMA,EACLc,IAAKd,EAAKQ,GACVP,SAAUA,EACVC,SAAUA,SCLba,MApBf,YAA8D,IAAxCN,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAOM,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC7C,OACI,6BACI,2BACAC,KAAK,WACLC,YAAY,qBACZH,SAAUA,EACVI,MAAOX,IAEP,2BACAS,KAAK,QACLC,YAAY,qBACZH,SAAUA,EACVI,MAAOV,IAEP,4BAAQH,QAASU,GAAjB,kBCoGGI,MAhHf,WAAgB,IAAD,EACeC,mBAAS,CACnCb,SAAU,GACVC,MAAO,KAHI,mBACNa,EADM,KACEC,EADF,KAMLf,EAAoBc,EAApBd,SAAUC,EAAUa,EAAVb,MANL,EAeaY,mBAAS,CACjC,CACId,GAAI,EACJC,SAAU,UACVC,MAAO,qBACPJ,QAAQ,GAEZ,CACIE,GAAI,EACJC,SAAU,WACVC,MAAO,qBACPJ,QAAQ,GAEZ,CACIE,GAAI,EACJC,SAAU,WACVC,MAAO,wBACPJ,QAAQ,KAhCD,mBAeNM,EAfM,KAeCa,EAfD,KAoCPC,EAASC,iBAAO,GA+BtB,OACE,oCACC,kBAAC,EAAD,CACGlB,SAAUA,EACVC,MAAOA,EACPM,SAjEW,SAAAY,GAAM,IAAD,EACIA,EAAEC,OAAlBX,EADY,EACZA,KAAME,EADM,EACNA,MACdI,EAAU,2BACLD,GADI,kBAENL,EAAOE,MA8DNH,SApCW,WACf,IAAMjB,EAAO,CACXQ,GAAIkB,EAAOI,QACXrB,WACAC,SAEFe,EAAS,GAAD,mBAAKb,GAAL,CAAYZ,KAEpBwB,EAAU,CACRf,SAAU,GACVC,MAAO,KAGTgB,EAAOI,SAAW,KAyBlB,kBAAC,EAAD,CAAUlB,MAAOA,EAAOX,SAtBT,SAAAO,GAGfiB,EAASb,EAAMmB,QAAO,SAAA/B,GAAI,OAAIA,EAAKQ,KAAOA,OAmBEN,SAhB7B,SAAAM,GACfiB,EACEb,EAAMC,KAAI,SAAAb,GAAI,OACZA,EAAKQ,KAAOA,EAAZ,2BAAsBR,GAAtB,IAA4BM,QAASN,EAAKM,SAAWN,WCvDzCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0d49590b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User({ user, onRemove, onToggle }) {\r\n    return (\r\n        <div>\r\n            <b style={{\r\n                cursor: 'pointer',\r\n                color: user.active ? 'green' : 'black'\r\n            }}\r\n            onClick={() => onToggle(user.id)}\r\n            >\r\n                {user.username}\r\n            </b>\r\n            <span>({user.email})</span>\r\n            <button onClick={() => onRemove(user.id)}>삭제</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction UserList({ users, onRemove, onToggle }) {\r\n    return (\r\n        <div>\r\n            {users.map(user => (\r\n                <User\r\n                 user={user}\r\n                  key={user.id}\r\n                  onRemove={onRemove}\r\n                  onToggle={onToggle}\r\n                  />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\n\r\nfunction CreateUser({ username, email, onChange, onCreate }) {\r\n    return (\r\n        <div>\r\n            <input\r\n            name=\"username\"\r\n            placeholder=\"계정명\"\r\n            onChange={onChange}\r\n            value={username}\r\n            />\r\n            <input\r\n            name=\"email\"\r\n            placeholder=\"이메일\"\r\n            onChange={onChange}\r\n            value={email}\r\n            />\r\n            <button onClick={onCreate}>등록</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateUser;","import React, { useRef, useState } from 'react';\nimport './App.css';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  });\n\n  const { username, email } = inputs;\n  const onChange = e => {\n    const { name, value } = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    });\n  };\n\n  const [users, setUsers] = useState([\n    {\n        id: 1,\n        username: 'bokjiho',\n        email: 'bok.jiho@gmail.com',\n        active: true,\n    },\n    {\n        id: 2,\n        username: 'jiminbok',\n        email: 'jiminbok@gmail.com',\n        active: false,\n    },\n    {\n        id: 3,\n        username: 'ockmilee',\n        email: 'leeockmi121@gmail.com',\n        active: false,\n    },\n  ]);\n  \n  const nextId = useRef(4);\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    };\n    setUsers([...users, user]);\n\n    setInputs({\n      username: '',\n      email: '',\n    });\n\n    nextId.current += 1;\n  };\n  \n  const onRemove = id => {\n    // user.id가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듦\n    // = user.id가 id인 것을 제거함\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const onToggle = id => {\n    setUsers(\n      users.map(user =>\n        user.id === id ? { ...user, active: !user.active } : user\n      )\n    );\n  };\n\n  return(\n    <>\n     <CreateUser \n        username={username}\n        email={email}\n        onChange={onChange}\n        onCreate={onCreate} \n     />\n    <UserList users={users} onRemove={onRemove} onToggle={onToggle} />\n    </>\n  );\n}\n\n\n/*\nfunction App() {\n  return (\n    <Wrapper>\n      <Hello name=\"react\" color=\"red\" isSpecial={true}/>\n      <Hello color=\"pink\"/>\n    </Wrapper>\n  )\n}\n*/\n\n// function App() {\n//   const name = 'react';\n//   const style = {\n//     backgroundColor: 'black',\n//     color: 'aqua',\n//     fontSize: 24, // 기본 단위 px\n//     padding: '1rem', // 다른 단위 사용 시 문자열로 설정\n//   }\n//   return (\n//     <>\n//     {/* 우와앙 주석이다 */}\n//     /* 주석이 없으면 화면에 나타남 */\n//       <Hello name=\"react\" color=\"red\"/>\n//       <div style={style}>{name}</div>\n//       <div className=\"gray-box\"></div>\n//       <Hello />\n//     </>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}